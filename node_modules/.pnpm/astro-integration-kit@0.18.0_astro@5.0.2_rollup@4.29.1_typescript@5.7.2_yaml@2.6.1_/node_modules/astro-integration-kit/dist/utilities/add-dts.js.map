{"version":3,"sources":["../../src/utilities/add-dts.ts","../../src/core/define-utility.ts"],"sourcesContent":["import { mkdirSync, readFileSync, writeFileSync } from \"node:fs\";\nimport { dirname, relative } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport type { AstroIntegrationLogger } from \"astro\";\nimport { parse, prettyPrint } from \"recast\";\nimport typescriptParser from \"recast/parsers/typescript.js\";\nimport { defineUtility } from \"../core/define-utility.js\";\n\nconst injectEnvDTS = ({\n\tsrcDir,\n\tlogger,\n\tspecifier,\n}: {\n\tsrcDir: URL;\n\tlogger: AstroIntegrationLogger;\n\tspecifier: URL | string;\n}) => {\n\tconst envDTsPath = fileURLToPath(new URL(\"env.d.ts\", srcDir));\n\n\tif (specifier instanceof URL) {\n\t\tspecifier = fileURLToPath(specifier);\n\t\tspecifier = relative(fileURLToPath(srcDir), specifier);\n\t\tspecifier = specifier.replaceAll(\"\\\\\", \"/\");\n\t}\n\n\tconst envDTsContents = readFileSync(envDTsPath, \"utf8\");\n\n\tif (\n\t\tenvDTsContents.includes(`/// <reference types='${specifier}' />`) ||\n\t\tenvDTsContents.includes(`/// <reference types=\"${specifier}\" />`)\n\t) {\n\t\treturn;\n\t}\n\n\tconst data: { singleQuotes: boolean; hasClient: boolean } =\n\t\tenvDTsContents.includes(`/// <reference types='astro/client' />`)\n\t\t\t? {\n\t\t\t\t\tsingleQuotes: true,\n\t\t\t\t\thasClient: true,\n\t\t\t\t}\n\t\t\t: envDTsContents.includes(`/// <reference types=\"astro/client\" />`)\n\t\t\t\t? { singleQuotes: false, hasClient: true }\n\t\t\t\t: envDTsContents.includes(\n\t\t\t\t\t\t\t`/// <reference path=\"../.astro/types.d.ts\" />`,\n\t\t\t\t\t\t)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tsingleQuotes: false,\n\t\t\t\t\t\t\thasClient: false,\n\t\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tsingleQuotes: true,\n\t\t\t\t\t\t\thasClient: false,\n\t\t\t\t\t\t};\n\n\tconst referenceToReplace = `/// <reference ${\n\t\tdata.hasClient ? \"types\" : \"path\"\n\t}=${data.singleQuotes ? `'` : `\"`}${\n\t\tdata.hasClient ? \"astro/client\" : \"../.astro/types.d.ts\"\n\t}${data.singleQuotes ? `'` : `\"`} />`;\n\n\tconst newEnvDTsContents = envDTsContents.replace(\n\t\treferenceToReplace,\n\t\t`${referenceToReplace}\\n/// <reference types=${\n\t\t\tdata.singleQuotes ? `'` : `\"`\n\t\t}${specifier}${data.singleQuotes ? `'` : `\"`} />`,\n\t);\n\n\t// the odd case where the user changed the reference to astro/client\n\tif (newEnvDTsContents === envDTsContents) {\n\t\treturn;\n\t}\n\n\twriteFileSync(envDTsPath, newEnvDTsContents);\n\tlogger.info(\"Updated env.d.ts types\");\n};\n\n/**\n * @deprecated\n * This utility will be removed in a future minor release. Bump your Astro peer dependency to ^4.14.0\n * and use [injectTypes](https://docs.astro.build/en/reference/integrations-reference/#injecttypes-options).\n *\n * @description\n * Allows to inject .d.ts file in users project. It will create a file inside `.astro`\n * and reference it from `src/env.d.ts`.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {object} options\n * @param {string} options.name - The name of the .d.ts file. Eg `test` will generate `.astro/test.d.ts`\n * @param {string} options.content\n *\n * @example\n * ```ts\n * addDts(params, {\n * \t\tname: \"my-integration\",\n * \t \tcontent: `declare module \"virtual:my-integration\" {}`,\n * })\n * ```\n *\n * @see https://astro-integration-kit.netlify.app/utilities/add-dts/\n */\nexport const addDts = defineUtility(\"astro:config:setup\")(\n\t(\n\t\t{ config: { root, srcDir }, logger },\n\t\t{\n\t\t\tname,\n\t\t\tcontent,\n\t\t}: {\n\t\t\tname: string;\n\t\t\tcontent: string;\n\t\t},\n\t) => {\n\t\tconst dtsURL = new URL(`.astro/${name}.d.ts`, root);\n\t\tconst filePath = fileURLToPath(dtsURL);\n\n\t\tinjectEnvDTS({\n\t\t\tsrcDir,\n\t\t\tlogger,\n\t\t\tspecifier: dtsURL,\n\t\t});\n\n\t\tmkdirSync(dirname(filePath), { recursive: true });\n\t\twriteFileSync(\n\t\t\tfilePath,\n\t\t\t// TODO: extract to helper to use with core injectTypes\n\t\t\tprettyPrint(\n\t\t\t\tparse(content, {\n\t\t\t\t\tparser: typescriptParser,\n\t\t\t\t}),\n\t\t\t\t{ tabWidth: 4 },\n\t\t\t).code,\n\t\t\t\"utf-8\",\n\t\t);\n\t},\n);\n","import type { HookParameters } from \"astro\";\nimport type { Hooks } from \"./types.js\";\n\n/**\n * A utility to be used on an Astro hook.\n *\n * @see defineUtility\n */\nexport type HookUtility<\n\tTHook extends keyof Hooks,\n\tTArgs extends Array<any>,\n\tTReturn,\n> = (params: HookParameters<THook>, ...args: TArgs) => TReturn;\n\n/**\n * Allows defining a type-safe function requiring all the params of a given hook.\n * It uses currying to make TypeScript happy.\n *\n * @param {string} _hook\n *\n * @see https://astro-integration-kit.netlify.app/core/define-utility/\n *\n * @example\n * ```ts\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\n *  return \"bar\";\n * });\n * ```\n */\nexport const defineUtility =\n\t<THook extends keyof Hooks>(_hook: THook) =>\n\t/**\n\t * The function itself\n\t * @param {Function} fn;\n\t */\n\t<TArgs extends Array<any>, T>(\n\t\tfn: HookUtility<THook, TArgs, T>,\n\t): HookUtility<THook, TArgs, T> =>\n\t\tfn;\n"],"mappings":"AAAA,OAAS,aAAAA,EAAW,gBAAAC,EAAc,iBAAAC,MAAqB,UACvD,OAAS,WAAAC,EAAS,YAAAC,MAAgB,YAClC,OAAS,iBAAAC,MAAqB,WAE9B,OAAS,SAAAC,EAAO,eAAAC,MAAmB,SACnC,OAAOC,MAAsB,+BCwBtB,IAAMC,EACgBC,GAM3BC,GAEAA,ED9BF,IAAMC,EAAe,CAAC,CACrB,OAAAC,EACA,OAAAC,EACA,UAAAC,CACD,IAIM,CACL,IAAMC,EAAaC,EAAc,IAAI,IAAI,WAAYJ,CAAM,CAAC,EAExDE,aAAqB,MACxBA,EAAYE,EAAcF,CAAS,EACnCA,EAAYG,EAASD,EAAcJ,CAAM,EAAGE,CAAS,EACrDA,EAAYA,EAAU,WAAW,KAAM,GAAG,GAG3C,IAAMI,EAAiBC,EAAaJ,EAAY,MAAM,EAEtD,GACCG,EAAe,SAAS,yBAAyBJ,CAAS,MAAM,GAChEI,EAAe,SAAS,yBAAyBJ,CAAS,MAAM,EAEhE,OAGD,IAAMM,EACLF,EAAe,SAAS,wCAAwC,EAC7D,CACA,aAAc,GACd,UAAW,EACZ,EACCA,EAAe,SAAS,wCAAwC,EAC/D,CAAE,aAAc,GAAO,UAAW,EAAK,EACvCA,EAAe,SACd,+CACD,EACC,CACA,aAAc,GACd,UAAW,EACZ,EACC,CACA,aAAc,GACd,UAAW,EACZ,EAECG,EAAqB,kBAC1BD,EAAK,UAAY,QAAU,MAC5B,IAAIA,EAAK,aAAe,IAAM,GAAG,GAChCA,EAAK,UAAY,eAAiB,sBACnC,GAAGA,EAAK,aAAe,IAAM,GAAG,MAE1BE,EAAoBJ,EAAe,QACxCG,EACA,GAAGA,CAAkB;AAAA,uBACpBD,EAAK,aAAe,IAAM,GAC3B,GAAGN,CAAS,GAAGM,EAAK,aAAe,IAAM,GAAG,KAC7C,EAGIE,IAAsBJ,IAI1BK,EAAcR,EAAYO,CAAiB,EAC3CT,EAAO,KAAK,wBAAwB,EACrC,EA0BaW,EAASC,EAAc,oBAAoB,EACvD,CACC,CAAE,OAAQ,CAAE,KAAAC,EAAM,OAAAd,CAAO,EAAG,OAAAC,CAAO,EACnC,CACC,KAAAc,EACA,QAAAC,CACD,IAII,CACJ,IAAMC,EAAS,IAAI,IAAI,UAAUF,CAAI,QAASD,CAAI,EAC5CI,EAAWd,EAAca,CAAM,EAErClB,EAAa,CACZ,OAAAC,EACA,OAAAC,EACA,UAAWgB,CACZ,CAAC,EAEDE,EAAUC,EAAQF,CAAQ,EAAG,CAAE,UAAW,EAAK,CAAC,EAChDP,EACCO,EAEAG,EACCC,EAAMN,EAAS,CACd,OAAQO,CACT,CAAC,EACD,CAAE,SAAU,CAAE,CACf,EAAE,KACF,OACD,CACD,CACD","names":["mkdirSync","readFileSync","writeFileSync","dirname","relative","fileURLToPath","parse","prettyPrint","typescriptParser","defineUtility","_hook","fn","injectEnvDTS","srcDir","logger","specifier","envDTsPath","fileURLToPath","relative","envDTsContents","readFileSync","data","referenceToReplace","newEnvDTsContents","writeFileSync","addDts","defineUtility","root","name","content","dtsURL","filePath","mkdirSync","dirname","prettyPrint","parse","typescriptParser"]}