import{mkdirSync as w,readFileSync as T,writeFileSync as h}from"node:fs";import{dirname as b,relative as k}from"node:path";import{fileURLToPath as c}from"node:url";import{parse as U,prettyPrint as $}from"recast";import V from"recast/parsers/typescript.js";var l=r=>t=>t;var C=({srcDir:r,logger:t,specifier:e})=>{let n=c(new URL("env.d.ts",r));e instanceof URL&&(e=c(e),e=k(c(r),e),e=e.replaceAll("\\","/"));let o=T(n,"utf8");if(o.includes(`/// <reference types='${e}' />`)||o.includes(`/// <reference types="${e}" />`))return;let i=o.includes("/// <reference types='astro/client' />")?{singleQuotes:!0,hasClient:!0}:o.includes('/// <reference types="astro/client" />')?{singleQuotes:!1,hasClient:!0}:o.includes('/// <reference path="../.astro/types.d.ts" />')?{singleQuotes:!1,hasClient:!1}:{singleQuotes:!0,hasClient:!1},s=`/// <reference ${i.hasClient?"types":"path"}=${i.singleQuotes?"'":'"'}${i.hasClient?"astro/client":"../.astro/types.d.ts"}${i.singleQuotes?"'":'"'} />`,a=o.replace(s,`${s}
/// <reference types=${i.singleQuotes?"'":'"'}${e}${i.singleQuotes?"'":'"'} />`);a!==o&&(h(n,a),t.info("Updated env.d.ts types"))},R=l("astro:config:setup")(({config:{root:r,srcDir:t},logger:e},{name:n,content:o})=>{let i=new URL(`.astro/${n}.d.ts`,r),s=c(i);C({srcDir:t,logger:e,specifier:i}),w(b(s),{recursive:!0}),h(s,$(U(o,{parser:V}),{tabWidth:4}).code,"utf-8")});import{AstroError as v}from"astro/errors";function u(r){let t=[];if(r){for(let e of r)if(e){if(Array.isArray(e)){t.push(...u(e));continue}e instanceof Promise||t.push(e.name)}}return t}var f=l("astro:config:setup")(({config:r},{plugin:t})=>{if(!t||t instanceof Promise)return!1;let e=new Set(u(r?.vite?.plugins)),n=new Set;if(typeof t=="string"&&n.add(t),typeof t=="object")if(Array.isArray(t)){let o=new Set(u(t));for(let i of o)n.add(i)}else n.add(t.name);return[...n].some(o=>e.has(o))});var d=l("astro:config:setup")((r,{plugin:t,warnDuplicated:e=!0})=>{let{updateConfig:n,logger:o}=r;e&&f(r,{plugin:t})&&o.warn(`The Vite plugin "${t.name}" is already present in your Vite configuration, this plugin may not behave correctly.`),n({vite:{plugins:[t]}})});var H=r=>{let t=1;return`${r.replace(/-(\d+)$/,(e,n)=>(t=parseInt(n)+1,""))}-${t}`},P=r=>`\0${r}`,D=(r,t,e)=>{let n=Array.isArray(t)?t:Object.entries(t).map(([s,a])=>({id:s,content:a,context:void 0})),o={};for(let{id:s,context:a}of n)o[s]??=[],o[s]?.push(...a===void 0?["server","client"]:[a]);for(let[s,a]of Object.entries(o))if(a.length!==[...new Set(a)].length)throw new v(`Virtual import with id "${s}" has been registered several times with conflicting contexts.`);let i=Object.fromEntries(n.map(({id:s})=>{if(!e&&s.startsWith("astro:"))throw new v(`Virtual import name prefix can't be "astro:" (for "${s}") because it's reserved for Astro core.`);return[P(s),s]}));return{name:r,resolveId(s){if(n.find(a=>a.id===s))return P(s)},load(s,a){let m=i[s];if(m){let A=a?.ssr?"server":"client",y=n.find(p=>p.id===m&&(p.context===void 0||p.context===A));if(y)return y.content}}}},S=l("astro:config:setup")((r,{name:t,imports:e,__enableCorePowerDoNotUseOrYouWillBeFired:n=!1})=>{let o=`vite-plugin-${t}`;for(;f(r,{plugin:o});)o=H(o);d(r,{warnDuplicated:!1,plugin:D(o,e,n)})});import{AstroError as x}from"astro/errors";var g=l("astro:config:setup")(({config:r},{name:t,position:e,relativeTo:n})=>{let o=r.integrations.findIndex(s=>s.name===t);if(o===-1)return!1;if(e===void 0)return!0;if(n===void 0)throw new x("Cannot perform a relative integration check without a relative reference.","Pass `relativeTo` on your call to `hasIntegration` or remove the `position` option.");let i=r.integrations.findIndex(s=>s.name===n);if(i===-1)throw new x("Cannot check relative position against an absent integration.");return e==="before"?o<i:o>i});var j=l("astro:config:setup")(({command:r,injectRoute:t},e)=>{r==="dev"&&t(e)});import{readdirSync as L,statSync as Q}from"node:fs";import{join as O,relative as F,resolve as N}from"pathe";var I=(r,t=r)=>{let e=L(r),n=[];for(let o of e){let i=O(r,o);if(Q(i).isDirectory()){let a=I(i,t);n=n.concat(a)}else{let a=F(t,i);n.push(a)}}return n},E=l("astro:config:setup")(({addWatchFile:r,command:t,updateConfig:e},n)=>{if(t!=="dev")return;let o=I(n).map(i=>N(n,i));for(let i of o)r(i);e({vite:{plugins:[{name:`rollup-aik-watch-directory-${n}`,buildStart(){for(let i of o)this.addWatchFile(i)}}]}})});import"astro";var W=l("astro:config:setup")((r,{integration:t,ensureUnique:e})=>{let{logger:n,updateConfig:o}=r;if(e&&g(r,{name:t.name})){n.warn(`Integration "${t.name}" has already been added by the user or another integration. Skipping.`);return}o({integrations:[t]})});export{R as addDts,W as addIntegration,S as addVirtualImports,d as addVitePlugin,g as hasIntegration,f as hasVitePlugin,j as injectDevRoute,E as watchDirectory};
//# sourceMappingURL=index.js.map