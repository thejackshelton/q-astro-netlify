import{z as h}from"astro/zod";import{AstroError as x}from"astro/errors";import{z as v}from"astro/zod";var f=(t,o)=>{let r=m(t.path);if(t.code==="invalid_union"){let n=new Map;for(let e of t.unionErrors.flatMap(i=>i.errors))if(e.code==="invalid_type"||e.code==="invalid_literal"){let i=m(e.path);n.has(i)?n.get(i).expected.push(e.expected):n.set(i,{code:e.code,received:e.received,expected:[e.expected]})}return{message:[p(r,n.size?"Did not match union:":"Did not match union.")].concat([...n.entries()].filter(([,e])=>e.expected.length===t.unionErrors.length).map(([e,i])=>e===r?`> ${c(i)}`:`> ${p(e,c(i))}`)).join(`
`)}}return t.code==="invalid_literal"||t.code==="invalid_type"?{message:p(r,c({code:t.code,received:t.received,expected:[t.expected]}))}:t.message?{message:p(r,t.message)}:{message:p(r,o.defaultError)}},c=t=>{if(t.received==="undefined")return"Required";let o=new Set(t.expected);switch(t.code){case"invalid_type":return`Expected type \`${d(o)}\`, received ${JSON.stringify(t.received)}`;case"invalid_literal":return`Expected \`${d(o)}\`, received ${JSON.stringify(t.received)}`}},p=(t,o)=>t.length?`**${t}**: ${o}`:o,d=t=>[...t].map((o,r)=>r===0?JSON.stringify(o):` | ${JSON.stringify(o)}`).join(""),m=t=>t.join(".");var y=({name:t,optionsSchema:o,setup:r})=>(...n)=>{let s=(o??v.never().optional()).safeParse(n[0],{errorMap:f});if(!s.success)throw new x(`Invalid options passed to "${t}" integration
`,s.error.issues.map(T=>T.message).join(`
`));let e=s.data,{hooks:i,...a}=r({name:t,options:e});return{...a,hooks:i,name:t}};import{readdirSync as k,statSync as A}from"node:fs";import{join as O,relative as S,resolve as H}from"pathe";var l=t=>o=>o;var u=(t,o=t)=>{let r=k(t),n=[];for(let s of r){let e=O(t,s);if(A(e).isDirectory()){let a=u(e,o);n=n.concat(a)}else{let a=S(o,e);n.push(a)}}return n},g=l("astro:config:setup")(({addWatchFile:t,command:o,updateConfig:r},n)=>{if(o!=="dev")return;let s=u(n).map(e=>H(n,e));for(let e of s)t(e);r({vite:{plugins:[{name:`rollup-aik-watch-directory-${n}`,buildStart(){for(let e of s)this.addWatchFile(e)}}]}})});var N=y({name:"astro-integration-kit/hmr",optionsSchema:h.object({directory:h.string()}),setup({options:t}){return{hooks:{"astro:config:setup":o=>{g(o,t.directory)}}}}});export{N as hmrIntegration};
//# sourceMappingURL=hmr-integration.js.map