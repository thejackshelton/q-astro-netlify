import { AstroIntegration } from 'astro';
import { Prettify, NonEmptyArray } from '../internal/types.js';
import { AnyPlugin, ExtendedHooks } from './types.js';

type WithPluginsParams<TPlugins extends NonEmptyArray<AnyPlugin>> = {
    name: string;
    plugins: TPlugins;
    hooks: ExtendedHooks<TPlugins>;
};
type WithPluginsReturn<Extensions> = Extensions & Omit<AstroIntegration, "name">;
/**
 * Allows to extend hooks with custom parameters. Only used for advanced use-cases.
 *
 * @param {object} params
 * @param {string} params.name The integration name
 * @param {Array<AnyPlugin>} params.plugins
 * @param {import("astro".AstroIntegration["hooks"])} params.hooks
 */
declare const withPlugins: <TPlugins extends [AnyPlugin, ...AnyPlugin[]], Extensions extends Record<any, unknown>>(options: WithPluginsParams<TPlugins> & Extensions) => WithPluginsReturn<Prettify<Omit<Extensions, keyof WithPluginsParams<any>>>>;

export { type WithPluginsReturn, withPlugins };
