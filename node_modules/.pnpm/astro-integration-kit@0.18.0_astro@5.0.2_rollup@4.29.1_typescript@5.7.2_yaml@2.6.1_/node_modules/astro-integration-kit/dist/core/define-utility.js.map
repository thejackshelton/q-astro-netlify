{"version":3,"sources":["../../src/core/define-utility.ts"],"sourcesContent":["import type { HookParameters } from \"astro\";\nimport type { Hooks } from \"./types.js\";\n\n/**\n * A utility to be used on an Astro hook.\n *\n * @see defineUtility\n */\nexport type HookUtility<\n\tTHook extends keyof Hooks,\n\tTArgs extends Array<any>,\n\tTReturn,\n> = (params: HookParameters<THook>, ...args: TArgs) => TReturn;\n\n/**\n * Allows defining a type-safe function requiring all the params of a given hook.\n * It uses currying to make TypeScript happy.\n *\n * @param {string} _hook\n *\n * @see https://astro-integration-kit.netlify.app/core/define-utility/\n *\n * @example\n * ```ts\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\n *  return \"bar\";\n * });\n * ```\n */\nexport const defineUtility =\n\t<THook extends keyof Hooks>(_hook: THook) =>\n\t/**\n\t * The function itself\n\t * @param {Function} fn;\n\t */\n\t<TArgs extends Array<any>, T>(\n\t\tfn: HookUtility<THook, TArgs, T>,\n\t): HookUtility<THook, TArgs, T> =>\n\t\tfn;\n"],"mappings":"AA6BO,IAAMA,EACgBC,GAM3BC,GAEAA","names":["defineUtility","_hook","fn"]}