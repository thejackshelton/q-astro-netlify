import { Hooks, Plugin } from './types.js';
import 'astro';
import '../internal/types.js';

type AllHooksPluginDefinition<TName extends string, TApi extends Record<string, unknown>> = {
    name: TName;
    setup: (...params: Parameters<AllHooksPlugin<TName, TApi>['setup']>) => <H extends keyof Hooks>(hookName: H) => (...hookParams: Parameters<Hooks[H]>) => TApi;
};
/**
 * A plugin that exposes the same API for all hooks.
 */
type AllHooksPlugin<TName extends string, TApi extends Record<string, unknown>> = Plugin<TName, Record<keyof Hooks, TApi>>;
/**
 * Allows defining a type-safe plugin that can be used from any Astro hook.
 *
 * This wraps {@link definePlugin} and receives a factory for the API to be
 * called dynamically for each hook. This allows plugins to support any hook
 * even those added by new versions of astro or hooks added by other integrations.
 *
 * @see https://astro-integration-kit.netlify.app/core/define-plugin/
 */
declare const defineAllHooksPlugin: <TName extends string, TApi extends Record<string, unknown>>(plugin: AllHooksPluginDefinition<TName, TApi>) => AllHooksPlugin<TName, TApi>;

export { type AllHooksPlugin, type AllHooksPluginDefinition, defineAllHooksPlugin };
